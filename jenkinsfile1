#!groovy

// Define DevCloud Artifactory for publishing non-docker image artifacts
def artUploadServer = Artifactory.server('devcloud')

// Change Snapshot to your own DevCloud Artifactory repo name
def Snapshot = ''

pipeline {
    agent none
    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '10'))
    }
    stages {
        stage ('Build') {
            agent {
                docker {
                    image 'node:8.11'
                    label 'dind'
                }
            }
            environment {
                CACHING_REPO_URL = 'http://nexus.marathon.l4lb.thisdcos.directory:8081/nexus/repository/npm-virtual/'
            }
            steps {
                sh 'npm config set strict-ssl false'
                sh "npm config set registry $CACHING_REPO_URL"
                sh 'npm install'
                sh 'npm install bower -g'
                sh 'npm install gulp-cli -g'
                sh 'bower --allow-root cache clean'
                sh 'rm -rf predix-cicd-node.tar'
                //sh 'bower --allow-root install'
                //sh 'gulp dist -v'
                sh "tar cf predix-cicd-node.tar *"
                stash includes: '*.tar', name: 'artifact'
                stash includes: 'manifest.yml', name: 'manifest'
            }
             post {
                success {
                    echo 'Build stage completed'
                }
                failure {
                    echo 'Build stage failed'
                }
            }
        }

        stage('Unit Tests') {
             agent {
                docker {
                    image 'node:8.11'
                    label 'dind'
                }
            }
            steps {
                sh 'npm test'
            }
           post {
                success {
                    echo 'Test stage completed'
                }
                failure {
                    echo 'Test stage failed'
                }
            }
        } 

        
        stage('Publish Artifacts') {
            agent {
                label 'dind'
            }
            // Enable the 'when' directive for multi-branch pipeline only
            //when {
            //    branch 'master'
            //}
            steps {
                script {
                    echo 'Publishing Artifacts to Artifactory'                               
                    unstash 'artifact'
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "*.tar",
                                "target": "${Snapshot}/predix-cicd-node-sample/"
                            }
                        ]
                    }"""
                    def buildInfo = artUploadServer.upload(uploadSpec)
                    artUploadServer.publishBuildInfo(buildInfo)
                }
            }
            post {
                success {
                    echo 'Deploy Artifact to Artifactory stage completed'
                }
                failure {
                    echo 'Deploy Artifact to Artifactory stage failed'          
                }
            }
        }
    
        // See README for instructions on what you need to configure for Sonar scan
        
  /*
        stage ('SonarQube Scan') {
            agent {
                docker {
                    image 'newtmitch/sonar-scanner:3.0.3'
                    label 'dind'
                    customWorkspace '/root/sonarqube'
                }
            }
            steps {
                checkout scm
                withSonarQubeEnv('<SonarQube_Name>') {
                    sh 'sonar-scanner'
                }
            }
            post {
                success {
                    echo "sonarqube-scan stage completed"
                }
                failure {
                    echo "sonarqube-scan stage failed"
                }
            }
        }  
        
        // See README for instructions on what you need to configure for coverity scan
        stage ('Coverity Scan') {
            agent {           	
            	docker {
                    image 'registry'
                    label 'dind'
                }
              
            }          
            environment {
               COVERITY = credentials('Coverity_Token')
            }
            steps {
                echo env.BRANCH_NAME
                sh 'rm -rf $WORKSPACE/covtemp'
                sh 'mkdir -p $WORKSPACE/covtemp'
                sh 'pwd' 
                sh '/opt/cov-analysis-linux64-8.7.1/bin/cov-build --dir $WORKSPACE/covtemp --no-command --fs-capture-search $WORKSPACE'
                sh '/opt/cov-analysis-linux64-8.7.1/bin/cov-analyze --dir $WORKSPACE/covtemp --security --enable-fb --all --webapp-security --webapp-security-preview'
                sh '/opt/cov-analysis-linux64-8.7.1/bin/cov-commit-defects --dir $WORKSPACE/covtemp --host <Coverity_Host> --https-port 8443 --stream "<Coverity_Stream>" --user "$COVERITY_USR" --password "$COVERITY_PSW"'
            }
            post {
                success {
                    echo "Coverity-Scan stage completed"
                }
                failure {
                    echo "Coverity-Scan stage failed"
                }
            }
        }
          
        // See README for instructions on what you need to configure for Checkmarx scan
        stage ('Checkmarx Scan') {
            agent {
                docker {
                    image 'registry'
                    label 'dind'
                }
            }        
            environment {
                CHECKMARX = credentials('Checkmarx_ID')
            }        
            steps {
                echo env.BRANCH_NAME
                sh '/CxConsolePlugin/runCxConsole.sh scan -v -ProjectName "<Project_Name>" -CxServer https://checkmarx.security.ge.com -CxUser "$CHECKMARX_USR" -CxPassword "$CHECKMARX_PSW" -locationtype folder -locationpath "./" -ReportXML "javascanreport.xml" -ReportPDF "javascanreport.pdf"'
            
            }
            post {
                success {
                    echo "Checkmarx stage completed"
                }
                failure {
                    echo "Checkmarx stage failed"
                }
            }
        }

*/
        stage ('Deploy') {
            agent {
                docker {
                    image 'pivotalpa/cf-cli-resource:2.3.1'
                    label 'dind'
                }
            }
            environment {
                CLOUD_FOUNDRY = credentials('Deployment_Credential');
            }
            steps {
                sh "cf login -a 
                sh 'cf push'
                stash includes: '*.tar', name: 'artifact'
                stash includes: 'manifest.yml', name: 'manifest'
            }
            post {
                success {
                    echo 'Deploy to Cloud Foundry stage completed'
                }
                failure {
                    echo 'Deploy to Cloud Foundry stage failed'
                }
            }
        }

        //See README for instructions on what you need to configure for Selenium integration testing
        stage('Dev Selenium Integration Tests') {
            agent {
                docker {
                    image 'node:6.11'
                    label 'dind'
                }
            }
            steps {
                unstash 'artifact'
                sh 'tar xf predix-cicd-node.tar'
                sh 'node_modules/.bin/wdio wdio.conf.js --suite sample'
                junit 'test/reports/*.xml'
                sh 'rm -rf *'
            }
            post {
                success {
                    echo 'Test stage completed'
                }
                failure {
                    echo 'Test stage failed'
                }
            }
        }
    }
    post {
        success {
            echo 'Build completed'
        }
        failure {
            echo 'Build failed'
        }
    }
   
}
